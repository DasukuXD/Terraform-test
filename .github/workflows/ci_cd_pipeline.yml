name: "CI CD Pipeline"

on:
  pull_request:
    branches:
      - main
      - master
    types:
      - closed

permissions:
  contents: read

jobs:
  scan-source-code:
    name: Scan Code With Trivy
    runs-on: ubuntu-latest
    continue-on-error: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Trivy
        run: |
          sudo apt-get install wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install trivy

      - name: Run Trivy Scan
        run: |
          trivy config .

  build-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: scan-terraform
    continue-on-error: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Login AWS ECR
        run: |
          region="us-east-1"
          aws_account_id="1234567890"
          aws ecr get-login-password --region $region | docker login --username AWS --password-stdin $aws_account_id.dkr.ecr.$region.amazonaws.com

      - name: Docker Build image frontend
        run: docker build -t frontend-image:v1.0 ./application/frontend

      - name: Docker Build image backend
        run: docker build -t backend-image:v1.0 ./application/backend

      - name: Push image to ECR
        run: |
          region="us-east-1"
          aws_account_id="1234567890"
          docker tag frontend-image:v1.0 $aws_account_id.dkr.ecr.$region.amazonaws.com/frontend-image:v1.1
          docker tag backend-image:v1.0 $aws_account_id.dkr.ecr.$region.amazonaws.com/backend-image:v1.1
          docker push $aws_account_id.dkr.ecr.$region.amazonaws.com/frontend-image:v1.0
          docker push $aws_account_id.dkr.ecr.$region.amazonaws.com/backend-image:v1.0

  Update-argocd:
    name: Update argocd
    runs-on: ubuntu-latest
    needs: build-push-image
    continue-on-error: true

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Update argocd
        run: |
          region="us-east-1"
          aws_account_id="1234567890"
          image_tag="v1.1"
          sed -i "s|$aws_account_id.dkr.ecr.$region.amazonaws.com/frontend-image:v1.0|$aws_account_id.dkr.ecr.$region.amazonaws.com/frontend-image:$image_tag|" ./manifests/frontend-deployment.yaml
          sed -i "s|$aws_account_id.dkr.ecr.$region.amazonaws.com/backend-image:v1.0|$aws_account_id.dkr.ecr.$region.amazonaws.com/backend-image:$image_tag|" ./manifests/backend-deployment.yaml
          git config --global user.name "username"
          git config --global user.email "email"
          git add ./manifests/frontend-deployment.yaml ./manifests/backend-deployment.yaml
          git commit -m "Update image tags to v1.0"
          git push

  Alert-to-GoogleChat:
    name: Alert to GoogleChat
    runs-on: ubuntu-latest
    needs: Update-argocd
    continue-on-error: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: ArgoCD Sync
        run: argocd app sync frontend-app --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }} --server ${{ secrets.ARGOCD_SERVER }}

      - name: ArgoCD Sync Status
        id: sync_status
        run: |
          STATUS=$(argocd app get frontend-app --auth-token ${{ secrets.ARGOCD_AUTH_TOKEN }} --server ${{ secrets.ARGOCD_SERVER }} --output=json | jq -r '.status.sync.status')
          echo "::set-output name=status::$STATUS"

      - name: Send sync status to Google Chat
        if: steps.sync_status.outputs.status == 'Synced'
        env:
          GOOGLE_CHAT_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
        run: |
          MESSAGE="ArgoCD sync successful! The app is now in sync."
          curl -X POST -H "Content-Type: application/json" \ -d "{\"text\": \"$MESSAGE\"}" \$GOOGLE_CHAT_WEBHOOK_URL

      - name: Send sync failure notification to Google Chat
        if: steps.sync_status.outputs.status != 'Synced'
        env:
          GOOGLE_CHAT_WEBHOOK_URL: ${{ secrets.GOOGLE_CHAT_WEBHOOK_URL }}
        run: |
          MESSAGE="ArgoCD sync failed. Please check the app status."
          curl -X POST -H "Content-Type: application/json" \-d "{\"text\": \"$MESSAGE\"}" \ $GOOGLE_CHAT_WEBHOOK_URL
